{
    "header":{
        "license": "//spx identifier: None.... Make sure this is right\n",
        "pragmaStatement":{
            "inputs":{
                "compilerVersion":1 
            },
            "content":[
            "pragma solidity ^",
            "",
            ";\n"
            ]
        },
        "imports":{
            "inputs":{
                "importPaths":1
            },
            "content":[
                "import ",
                [""],
                ";\n"
            ]
        },
        "contractDefinition":{
            "inputs":{
                "name": 1,
                "children": 3
            },
            "content":[
                "contract ",
                "",
                " is ",
                [""],
                "{\n"
            ]
        }
    },
    "stateVars":{
        "permissionsMapping":{
            "content":[
                "uint ONE_HUNDRED_PERCENT = 10000;\n",
                "enum Permission{PERMITED,PROHIBITED,UNPAUSED_ONLY,TIMELOCK}\n",
                "mapping(bytes32=>mapping(address=>Permission)) public permissions;\n"
            ]
        }
    },
    "constructor":{
        "inputs":{
            "arguments":2,
            "name": 5,
            "symbol": 7,
            "children": 9,
            "body": 15
        },
        "content":[
            "constructor(",
            "bytes32[] memory _functionSignatures, address[] memory _permissionsUsers, Permission[] memory _permissionsEnum",
            "",
            ")",
            "ERC20(",
            "",
            ",",
            "",
            ")",
            [""],
            "{\n",
            "require(_permissionsUsers.length == _permissionsEnum.length);\n",
            "for(uint i = 0; i < _permissionsUsers.length; i++){\n",
            "permissions[_functionSignatures[i]][_permissionsUsers[i]] = _permissionsEnum[i];\n",
            "}\n",
            "",
            "}\n"
        ]
    },
    "functions":{
        "names":[
            "mint",
            "burn",
            "airdrop",
            "tax",
            "updatePermissions",
            "_permissionCheck",
            "_percent"
        ],
        "mint":{
            "content":[
                "function mint(address _who, uint _amount)external{\n",
                "require(_permissionCheck(msg.sig, msg.sender),'Not permitted to call this function');\n",
                "_mint(_who, _amount);\n",
                "}\n"
            ]
        },
        "burn":{
            "content":[
                "function burn(uint _amount)external{\n",
                "require(_permissionCheck(msg.sig, msg.sender),'Not permitted to call this function');\n",
                "_burn(msg.sender,_amount);\n",
                "}\n"
            ]
        },
        "airdrop":{
            "inputs": {
                "minted":4
            },
            "options":{
                "minted": "_mint(_recievers[i],_amounts[i]);\n",
                "!minted": "_transfer(address(this),_recievers[i],_amounts[i]);\n"
            },
            "content":[
                "function airdrop(address[] memory _receivers, uint[] memory _amounts)external{\n",
                "require(_permissionCheck(msg.sig, msg.sender),'Not permitted to call this function');\n",
                "require(_receivers.length == _amounts.length,'Arrays must be the same length');\n",
                "for(uint i = 0; i < _receivers.length; i++){\n",
                "",
                "}\n",
                "}\n"
            ]
        },
        "tax":{
            "inputs":{
                "taxReceiver": 3,
                "tax": 5
            },
            "content":[
                "function _beforeTokenTransfer(address from, address to, uint256 amount)internal override{\n",
                "if(_permissionCheck(msg.sig, msg.sender)){\n",
                "_transfer(from, ",
                "",
                ",_percent(amount, ",
                "",
                "));\n",
                "}\n",
                "}\n"
            ]
        },
        "updatePermissions":{
            "content":[
                "function updatePermissions(bytes32 _sig, address _user, Permission _newPermission)external{\n",
                "require(_permissionCheck(msg.sig, msg.sender),'Not permitted to call this function');\n",
                "permissions[_sig][_user] = _newPermission;\n",
                "}\n"
            ]
        },
        "_permissionCheck":{
            "content":[
                "function _permissionCheck(bytes32 _sig, address _who)private returns(bool){\n",
                "Permission p = permissions[_sig][_who];\n",
                "return((p != PROHIBITED) && (p == PERMITED || (p == UNPAUSED && !paused()) ));\n",
                "}\n"
            ]
        },
        "_percent":{
            "content":[
                "function _percent(uint _amount, uint _percent)private returns(uint){\n",
                "return ((_amount * _percent) / ONE_HUNDRED_PERCENT);\n",
                "}\n"
            ]
        }
    },
    "footer": "}"
}